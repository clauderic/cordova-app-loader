{
  "name": "@peoplelikeus/cordova-app-loader-wkwebview",
  "version": "0.17.2",
  "description": "Cordova App Loader fork for WKWebView compatibility",
  "main": "index.js",
  "keywords": [
    "cordova",
    "app",
    "loader",
    "remote",
    "update"
  ],
  "author": {
    "name": "Mark Marijnissen"
  },
  "contributors": [{
    "name": "Clauderic Demers",
    "email": "clauderic@peoplelikeus.ca"
  }],
  "license": "MIT",
  "dependencies": {
    "cordova-file-cache": "^0.12.0"
  },
  "readme": "cordova-app-loader\n==========\n> Remote update your Cordova App\n\n1. Write a **manifest.json** to **bootstrap.js** your app.\n2. Build and deploy your app.\n\nA little later...\n\n1. Upload an update to your server (**manifest.json** + files)\n2. Use `CordovaAppLoader` to \n   1. `check()` for a new manifest\n   2. `download()` files\n   3. `update()` your app!\n\n\n## Demo Time!\n\nCheck out [Cordova App Loader](http://data.madebymark.nl/cordova-app-loader/index.html) in Chrome for a demo! (**Chrome only!**)\n\nOr run on your own computer:\n\n```bash\ngit clone git@github.com:markmarijnissen/cordova-app-loader.git\ncd cordova-app-loader\ncordova platform add ios@3.7.0\ncordova plugin add org.apache.cordova.file\ncordova plugin add org.apache.cordova.file-transfer\ncordova run ios\n```\n\nAll code is in the `www` directory. Modify `serverRoot` in `www/app.js` to run your own server.\n\n## Quick Start\n\nCheck out [autoupdate.js](https://github.com/markmarijnissen/cordova-app-loader/blob/master/autoupdate.js) - it automatically updates when you open or resume the app.\n\nAutomatic updates have a few downsides:\n\n* Downloading files in the background can slow down performance (sluggish UI).\n* Automatically updating can interrupt the user.\n\n### Step by step instruction:\n\n1. Setup Cordova (see below)\n1. Download to your `www` directory:\n    * [index.html](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/www/autoupdate.html) (Cordova entry point)\n    * [bootstrap.js](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/dist/bootstrap.js) (Dynamically loads JS/CSS)\n    * [cordova-app-loader-complete.js](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/dist/cordova-app-loader-complete.js) (Complete CordovaAppLoader library with dependencies)\n    * [autoupdate.js](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/dist/autoupdate.js) (Example implementation)\n2. Write a **manifest.json** (see below). Include `autoupdate.js` and `cordova-app-loader-complete.js`.\n3. Set the correct server in `index.html`:\n    ```html\n    <script \n        type=\"text/javascript\" \n        server=\"http://data.madebymark.nl/cordova-app-loader/\" \n        manifest=\"manifest.json\" \n        src=\"bootstrap.js\"></script>\n    ```\n\n4. Write `window.BOOTSTRAP_OK = true` in your code when your app succesfully launches.\n5. Launch your app. \n\nNow you can remote update your app:\n\n6. Upload a new **manifest.json** (+ files) to your server.\n7. Reopen your app to download and apply the update.\n\n## Installation\n\n### Setup Cordova\n\n```bash\n  cordova platform add ios@3.7.0\n  cordova plugin add org.apache.cordova.file\n  cordova plugin add org.apache.cordova.file-transfer\n```\n\n**IMPORTANT:** For iOS, use Cordova 3.7.0 or higher (due to a [bug](https://github.com/AppGyver/steroids/issues/534) that affects requestFileSystem).\n\n###Download and include bootstrap.js\n\nYou need **bootstrap.js** ([github](https://github.com/markmarijnissen/cordova-app-loader/), [file](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/bootstrap.js)) to read the **manifest.json** to launch your app. \n\nAdd **bootstrap.js** to your [index.html](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/www/index.html).\n\n### Download and include CordovaAppLoader (and dependencies)\n\n**Option 1: Download all dependencies as a single pre-build file (easy)**\n\nDownload cordova-app-loader-complete.js ([github](https://github.com/markmarijnissen/cordova-app-loader/blob/master/dist/cordova-app-loader-complete.js), [download](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/dist/cordova-app-loader-complete.js), [minified](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/dist/cordova-app-loader-complete.min.js)). This build uses promiscuous ([github](https://github.com/RubenVerborgh/promiscuous),[download](https://raw.githubusercontent.com/RubenVerborgh/promiscuous/master/promiscuous.js)) as Promise library.\n\n**Option 2: Download pre-build files for every module (customizable)**\n\nIf you want to use your own Promise library, you have to load every module individually:\n\n* **cordova-app-loader** ([github](https://github.com/markmarijnissen/cordova-app-loader/), [download](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/www/lib/CordovaAppLoader.js)) - checks, downloads and updates using **manifest.json**\n* **cordova-promise-fs** ([github](https://github.com/markmarijnissen/cordova-promise-fs), [download](https://github.com/markmarijnissen/cordova-app-loader/blob/master/www/lib/CordovaPromiseFS.js)) - deals with the Cordova File API\n* a **Promise** libary that follows the [Promise/A+ spec](https://promisesaplus.com/), such as bluebird ([github](https://github.com/petkaantonov/bluebird), [download](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/www/lib/bluebird.js)), promiscuous ([github](https://github.com/RubenVerborgh/promiscuous),[file](https://raw.githubusercontent.com/RubenVerborgh/promiscuous/master/promiscuous.js)) or [Angular's $q](https://docs.angularjs.org/api/ng/service/$q).\n\n**Option 3: Use Bower to fetch pre-build modules:**\n\n```bash\n  bower install cordova-app-loader \n  bower install cordova-promise-fs \n  bower install bluebird # or another library that follows the Promise/A+ spec.\n```\n\n**Option 4: Use NPM  to fetch CommonJS modules:**\n\n```bash\n  npm install cordova-app-loader \n  npm install cordova-promise-fs\n  npm install bluebird  # or another library that follows the Promise/A+ spec.\n```\n\n## The Manifest\n\nBefore you start, you need to write a **manifest.json** to describe:\n\n* Which files to download, \n* Which JS/CSS to load during bootstrap. \n\n### Writing manifest.json\n\n```javascript\n{\n  \"files\": {  // these files are downloaded \n    \"cordova-app-loader-complete\": {\n      \"version\": \"76f1eecd3887e69d7b08c60be4f14f90069ca8b8\",\n      \"filename\": \"cordova-app-loader-complete.js\"\n    },\n    \"autoupdate\": {\n      \"version\": \"76f1eecd3887e69d7b08c60be4f14f90069ca8b8\",\n      \"filename\": \"autoupdate.js\"\n    },\n    \"template\": {\n      \"version\": \"3e70f2873de3d9c91e31271c1a59b32e8002ac23\",\n      \"filename\": \"template.html\"\n    },\n    \"app\": {\n      \"version\": \"8c99369a825644e68e21433d78ed8b396351cc7d\",\n      \"filename\": \"app.js\"\n    },\n    \"style\": {\n      \"version\": \"6e76f36f27bf29402a70c8adfee0f84b8a595973\",\n      \"filename\": \"style.css\"\n    }\n  },\n  \"load\": [ // these files are loaded in your index.html\n    \"cordova-app-loader-complete.js\",\n    \"autoupdate.js\",\n    \"app.js\",\n    \"style.css\"\n  ]\n}\n```\n\n### Updating manifest.json\nYou can update your existing manifest like this:\n\n```bash\nnode node_modules/cordova-app-loader/bin/update-manifest www www/manifest.json\nnode node_modules/cordova-app-loader/bin/update-manifest [root-directory] [manifest.json]\n```\n\nIt will update the version of only changed files (with a hash of the content).\n\nThere is also [a Gruntfile](https://gist.github.com/lylepratt/d8bf84b3b7d6932e3549) available.\n\n## Usage / API\n\n### Overview\n\n1. Bootstrap your app.\n2. Instantiate a `new CordovaAppLoader()`\n3. `check()` for updates\n4. `download()` new files\n5. `update()` to apply update\n\nSee [autoupdate.js](https://github.com/markmarijnissen/cordova-app-loader/blob/master/autoupdate.js) for an example of `check()`, `download()` and `update()`.\n\n### Step 1: Bootstrap your app.\n\nAdd [bootstrap.js](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/www/bootstrap.js) to your [index.html](https://raw.githubusercontent.com/markmarijnissen/cordova-app-loader/master/www/index.html). This retrieves **manifest.json** and dynamically inserts JS/CSS to the current page.\n\n```html\n  <script type=\"text/javascript\" timeout=\"5000\" manifest=\"manifest.json\" src=\"bootstrap.js\"></script>\n```\n\nOn the second run, the manifest.json is retrieved from localStorage.\n\nSet `window.BOOTSTRAP_OK` to `true` when your app has succesfully launched.\n\nIf your app is updated and `window.BOOTSTRAP_OK` is **not** true after `timeout` milliseconds, the corrupt manifest in localStorage is destroyed, and the page will reload. This will revert the app back to the original manifest.\n\nYou should always bundle a manifest.json (+ files) in your app to make sure your app has a \"factory default\" to revert back to. (And to make sure your app works offline).\n\n### Step 2: Intialize CordovaAppLoader\n\n```javascript\n// When using NPM, require these first.\n// When using bower or when you downloaded the files these are already available as global variables.\nvar CordovaPromiseFS = require('cordova-promise-fs');\nvar CordovaAppLoader = require('cordova-app-loader');\nvar Promise = require('bluebird');\n\n// Initialize a FileSystem\nvar fs = new CordovaPromiseFS({\n  Promise: Promise\n});\n\n// Initialize a CordovaAppLoader\nvar loader = new CordovaAppLoader({\n  fs: fs,\n  serverRoot: 'http://data.madebymark.nl/cordova-app-loader/',\n  localRoot: 'app',\n  cacheBuster: true // make sure we're not downloading cached files.\n  checkTimeout: 10000 // timeout for the \"check\" function - when you loose internet connection\n});\n```\n\n### Step 3: Check for updates\n\n```javascript\n// download manifest from: serverRoot+'manifest.json'\nloader.check().then(function(updateAvailable) { ... })  \n\n// download from custom url\nloader.check('http://yourserver.com/manifest.json').then( ... ) \n\n// or just check an actual Manifest object.\nloader.check({ files: { ... } }).then( ... ) \n```\n\n**Implementation Note:** Only file versions are compared! If you, for example, update `manifest.load` then the promise will return `false`!\n\n### Step 4: Download update\n\n```javascript\nloader.download(onprogress)\n   .then(function(manifest){ ... },function(failedDownloadUrlArray){ ... });\n```\n\n**Note:** When downloading, invalid files are deleted first. This invalidates the current manifest. Therefore, the current manifest is removed from localStorage. The app is reverted to \"factory settings\" (the manifest.json that comes bundled with the app).\n\n### Step 5: Apply update (reload page to bootstrap new files)\n\nThis writes the new manifest to localStorage and reloads the page to bootstrap the updated app.\n\n```javascript\n// write manifest to localStorage and reload page:\nloader.update() // returns `true` when update can be applied\n\n// write manifest to localStorage, but DO NOT reload page:\nloader.update(false)\n```\n\n**Implementation Note:** CordovaAppLoader changes the `manifest.root` to point to your file cache - otherwise the bootstrap script can't find the downloaded files!\n\n## Testing\n\nWith the demo app, you can test:\n\n* Check, with a new manfiest (resolve true)\n* Check, with no new manifest (resolve false)\n* Check, with no internet (reject timeout)\n* Download (resolve with manifest)\n* Download with no internet / while interrupting internet (resolve if withing retry attempts, reject with error otherwise)\n* Download without checking (null)\n* Update (true if update possible, false otherwise)\n* Reset to factory\n* Slow Download (progress bar)\n* Broken Link (reject download with broken link)\n* Broken App (resets back to factory)\n\nThere are also [unit tests](http://data.madebymark.nl/cordova-app-loader/test/) (*Chrome only!*).\n\nIt includes unit tests for [CordovaPromiseFS](https://github.com/markmarijnissen/cordova-promise-fs) and [CordovaFileCache](https://github.com/markmarijnissen/cordova-file-cache).\n\n## Why Cordova App Loader is Awesomene.\n\nI want CordovaAppLoader to be fast, responsive, flexible, reliable and safe. In order to do this, I've thought about everything that could destroy the app loader and fixed it.\n\n### Loading JS/CSS dynamically using bootstrap.js\n\nFirst, I wanted to download 'index.html' to storage, then redirect the app to this new index.html.\n\nThis has a few problems:\n\n* `cordova.js` and plugin javascript cannot be found. \n* It is hard to include `cordova.js` in the manifest because it is platform specific.\n* It is hard to find all plugin javascript - it is buried in Cordova internals. \n* Reloading a page costs more time, CPU and memory because cordova plugins are reset.\n\nDynamically inserting CSS and JS allows you for almost the same freedom in updates, without all these problems.\n\n### Fast, reliable and performant downloads:\n\n* To save bandwidth and time, only files that have changed are downloaded.\n* CordovaPromiseFS limits concurrency (3) to avoid trashing your app.\n* CordovaFileCache will retry the download up to 3 times - each with an increasing timeout.\n* When executing `loader.download()` for the second time, old downloads are aborted.\n* \"onprogress\" event is called explicitly on every download. \n\n### Avoid downloading if you can copy files\n\nWhen updating, copy files that are already bundled with the app. (Of course, only if the file version has not changed)\n\n### Responsive app: Avoid never-resolving promises\n\n`check` and `download` return a promise. These promises should always resolve - i.e. don't wait forever for a \"deviceready\" or for a \"manifest.json\" AJAX call to return.\n\nI am assuming the following promises resolve or reject sometime:\n\n* requestFileSystem\n* CordovaPromiseFS methods:\n    * fs.deviceready (Rejected after timeout of 5 seconds).\n    * fs.file() (Relies on `fs.root.getFile`)\n    * fs.dir() (Relies on `fs.root.getDirectory`)\n    * fs.ensure() (Recursively relies on `getDirectory`)\n    * fs.list() (Relies on fs.dir() and `dirReader.readEntries`)\n    * fs.remove() (Relies on `fileEntry.remove`)\n    * fs.download() (Implemented as a concurrency-limited queue, in which failed downloads can re-add themselves to the queue before rejecting the promise, this promise ultimately relies on Cordova's `filetransfer.download()` to resolve the promise)\n\n* XHR-request to fetch manifest.json (Rejected after timeout)\n\nAs you see, most methods rely on the succes/error callbacks of native/Cordova methods.\n\nOnly for `deviceready` and the XHR-request I've added timeouts to ensure a timely response.\n\n### Offline - when you loose connection.\n\nWhen using `check`: The XHR will timeout.\n\nWhen using `download`: I am assuming Cordova will invoke the error callback. The download has a few retry-attempts. If the connetion isn't restored before the last retry-attemt, the download will fail.\n\n### Crashes\n\nThe only critical moment is during a download. Old files are removed while new files aren't fully downloaded yet. This makes the current manifest point to missing or corrupt files. Therefore, before downloading, the current manifest is destroyed. \n\nIf the app crashes during a download, it will restart using the original manifest.\n\n### Bugs in the update\n\n* When `BOOTSTRAP_OK` is not set to `true` after a timeout, the app will destroy the current manifest and revert back to the original manifest.\n\n### Avoid never-ending update loop\n\nIf for some reason the downloaded files cannot be found in the cache on the next `check()`, CordovaAppLoader will indicate `true`, meaning there are still files to be downloaded.\n\nThis is correct and intended behavior, as we expect all files to be in the cache when `check()` returns false.\n\nHowever, depending on how/when you call `check()`, this could result in a never-ending loop in which the app attempts to download files, but for some reason, the never end up in the cache.\n\nTo avoid this pitfall, the following safeguard is implemented:\n\n* Whenever you call `update()`, the manifest is written to localStorage twice:\n   * `manifest`\n   * `update_attempt_manifest`\n\n* When calling `check()`, it compares the new manifest with `update_attempt_manifest`. If they are the same, it means you've attempted this before, so `check()` will return false.\n\n\n### Normalize path everywhere\n\nAll filenames and paths are normalized. \n\n* This avoids problems on android (when a path starts with a `/`, Android throws a NullPointerExpception)\n* The Manifest.json writer does not have to worry which path convention to use.\n* This avoids errors when comparing cache with old manifest with new manifest.\n\nSee [CordovaPromiseFS](https://github.com/markmarijnissen/cordova-promise-fs) for more details.\n\n\n### More to be considered?\n\nLet me know if you find bugs. Report an issue!\n\n## TODO for VERSION 1.0.0\n\n* Write automated tests\n\n## FAQ\n\n#### What happens if update the App in the App Store?\n\nThe version on your **remote server** is the **single source of truth**.\n\nHere is a flow chart:\n\n* Did the app detect an **earlier update the remote server**?\n\n    * Yes - Your App downloaded the update and is now running from the FileCache.\n          * Did the app detect the **remote update** before the **app store update**?\n               * Yes - Your app will download files from remote - the app store update will only act as fallback.\n               * No - Your app will run the outdated version until it detects the **remote update**. When updating, it will copy files from bundle (instead of downloading from remote).\n\n    * No - Your App never detected an update and is uses the bundled files.\n          * Did the app detect the **remote update** before the **app store update**?\n               * Yes - Your app will download files from remote - the app store update will only act as fallback.\n               * No - Your app will use the bundled files, as they are up to date with the remote.\n\n\n## Changelog\n\n### 0.16.0 (17/03/2015)\n\n* Fix: Endless Update detection bug. (issue #18)\n\n### 0.15.0 (17/03/2015)\n\n* Fix: Missing reject (issue #26) -- thanks very much @pheinicke!\n* Fix: Promise.resolve is not in A+ spec. (issue #23).\n* Updated cordova-file-cache dependency.\n* Fix: Improved Cordova detection (wait for deviceready) in **bootstrap.js** (issue #17)\n\n### 0.14.0 (22/1/2014)\n\n* Fix: Copy files from bundle does not work if your app is not directly in `/www/`. For example when your entry point is `/www/app/index.html`.\n\n### 0.13.0 (9/1/2014)\n\n* Fix [issue 15](https://github.com/markmarijnissen/cordova-app-loader/issues/15): Copied files contain index.html on Android when location.href contains `#/` while updating.\n\n### 0.12.0 (21/12/2014)\n\n* Simplified copy implementation a lot.\n* Bugfix: Copy files from bundle on Android\n* Bugfix: Update dependencies\n\n### 0.11.0 (21/12/2014)\n\n* You can now set `serverRoot` from Manifest.json (only if you set `allowServerRootFromManifest` to `true`).\n* AppLoader will copy files from bundle when possible.\n\n### 0.10.0 (02/12/2014)\n\n* Improved loading time of scripts in bootstrap.js (parallel download instead of one-by-one). Thanks [lylepratt](https://github.com/lylepratt)!\n\n### 0.9.0 (02/12/2014)\n\n* Added cache-buster to bootstrap.js (browser cache...)\n* Improved Safe-guard for checking corrupt manifests\n\n### 0.8.0 (28/11/2014)\n\n* Normalized all paths.\n* Updated dependencies.\n* Added Safe-guard for never-ending update loop.\n\n### 0.7.0 (27/11/2014)\n\n* Fixed a nasty path issue (remove prepending / when getting files to delete to match convention of file-cache - otherwise check will always return true!)\n* Added initial [QUnit tests](http://data.madebymark.nl/cordova-app-loader/test/).\n* Updated dependencies.\n\n### 0.6.1 (19/11/2014)\n\n* Updated file-cache dependency for android bugfix\n\n### 0.6.0 (19/11/2014)\n\n* Created a `dist` folder to for all build files\n* Fixed a few errors\n* Updated readme\n* Changed the autoupdate.js implementation (it doesn't include bootstrap.js anymore)\n\n### 0.5.0 (15/11/2014)\n\n* Reject XHR-request when checking.\n\n### 0.4.0 (13/11/2014)\n\n* Changed manifest.json format.\n\n### 0.3.0 (13/11/2014)\n\n* Chrome support!\n\n### 0.2.0 (09/11/2014)\n\n* Improved app layout\n* Added test-cases to the app (slow, broken app, broken download)\n* Several bugfixes\n\n### 0.1.0 (07/11/2014)\n\n* First release\n\n## Contribute\n\nConvert CommonJS to a browser-version:\n```bash\nnpm install webpack -g\nnpm run-script prepublish\n```\n\nFeel free to contribute to this project in any way. The easiest way to support this project is by giving it a star.\n\n## Contact\n-   @markmarijnissen\n-   http://www.madebymark.nl\n-   info@madebymark.nl\n\n© 2014 - Mark Marijnissen",
  "readmeFilename": "README.md",
  "_id": "cordova-app-loader@0.17.0",
  "_from": "cordova-app-loader@>=0.17.0 <0.18.0"
}
